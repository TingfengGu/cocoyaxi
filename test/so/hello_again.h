// Autogenerated, do not edit. All changes will be undone.

#pragma once

#include "co/so/rpc.h"

namespace xx {

class HelloAgain : public rpc::Service {
  public:
    typedef void (HelloAgain::*Fun)(const Json&, Json&);

    HelloAgain() : _name("xx.HelloAgain") {
        _methods[hash64("hello")] = &HelloAgain::hello;
        _methods[hash64("again")] = &HelloAgain::again;
    }

    virtual ~HelloAgain() {}

    virtual const char* name() const {
        return _name.c_str();
    }

    virtual void process(const Json& req, Json& res) {
        json::Value method = req["method"];
        if (!method.is_string()) {
            res.add_member("err", 400);
            res.add_member("errmsg", "req has no method");
            return;
        }

        auto it = _methods.find(hash64(method.get_string(), method.size()));
        if (it == _methods.end()) {
            res.add_member("err", 404);
            res.add_member("errmsg", "method not found");
            return;
        }

        (this->*it->second)(req, res);
    }

    virtual void hello(const Json& req, Json& res) = 0;

    virtual void again(const Json& req, Json& res) = 0;

  private:
    std::unordered_map<uint64, Fun> _methods;
    fastring _name;
};

} // xx
